
NUFSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000579c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800595c  0800595c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800595c  0800595c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800595c  0800595c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  08005970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08005970  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ff2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003908  00000000  00000000  00038071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003b980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f4a  00000000  00000000  0003cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e2d9  00000000  00000000  0003dc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b07d  00000000  00000000  0005bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aced3  00000000  00000000  00076fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051c8  00000000  00000000  00123ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  00129084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800590c 	.word	0x0800590c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800590c 	.word	0x0800590c

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001da:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <MX_ADC1_Init+0xd0>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80001de:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80001e6:	4b2b      	ldr	r3, [pc, #172]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80001ec:	4b29      	ldr	r3, [pc, #164]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80001f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <MX_ADC1_Init+0xcc>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000202:	2204      	movs	r2, #4
 8000204:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000206:	4823      	ldr	r0, [pc, #140]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000208:	f000 fe50 	bl	8000eac <HAL_ADC_Init>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000212:	f000 fadf 	bl	80007d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000216:	2300      	movs	r3, #0
 8000218:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800021a:	2301      	movs	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021e:	2300      	movs	r3, #0
 8000220:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4619      	mov	r1, r3
 8000226:	481b      	ldr	r0, [pc, #108]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000228:	f001 f872 	bl	8001310 <HAL_ADC_ConfigChannel>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000232:	f000 facf 	bl	80007d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000236:	2301      	movs	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800023a:	2302      	movs	r3, #2
 800023c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000244:	f001 f864 	bl	8001310 <HAL_ADC_ConfigChannel>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800024e:	f000 fac1 	bl	80007d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000252:	2302      	movs	r3, #2
 8000254:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000256:	2303      	movs	r3, #3
 8000258:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4619      	mov	r1, r3
 800025e:	480d      	ldr	r0, [pc, #52]	; (8000294 <MX_ADC1_Init+0xcc>)
 8000260:	f001 f856 	bl	8001310 <HAL_ADC_ConfigChannel>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800026a:	f000 fab3 	bl	80007d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800026e:	2303      	movs	r3, #3
 8000270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000272:	2304      	movs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4619      	mov	r1, r3
 800027a:	4806      	ldr	r0, [pc, #24]	; (8000294 <MX_ADC1_Init+0xcc>)
 800027c:	f001 f848 	bl	8001310 <HAL_ADC_ConfigChannel>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000286:	f000 faa5 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000028 	.word	0x20000028
 8000298:	40012400 	.word	0x40012400

0800029c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a2e      	ldr	r2, [pc, #184]	; (8000374 <HAL_ADC_MspInit+0xd8>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d155      	bne.n	800036a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002be:	4b2e      	ldr	r3, [pc, #184]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a2d      	ldr	r2, [pc, #180]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6193      	str	r3, [r2, #24]
 80002ca:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d2:	613b      	str	r3, [r7, #16]
 80002d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b28      	ldr	r3, [pc, #160]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a27      	ldr	r2, [pc, #156]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <HAL_ADC_MspInit+0xdc>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80002ee:	230f      	movs	r3, #15
 80002f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002f2:	2303      	movs	r3, #3
 80002f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f001 fd32 	bl	8001d6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <HAL_ADC_MspInit+0xe0>)
 800030a:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <HAL_ADC_MspInit+0xe4>)
 800030c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800030e:	4b1b      	ldr	r3, [pc, #108]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <HAL_ADC_MspInit+0xe0>)
 800031c:	2280      	movs	r2, #128	; 0x80
 800031e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000326:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <HAL_ADC_MspInit+0xe0>)
 800032a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000332:	2220      	movs	r2, #32
 8000334:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000338:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800033c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800033e:	480f      	ldr	r0, [pc, #60]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000340:	f001 fae9 	bl	8001916 <HAL_DMA_Init>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800034a:	f000 fa43 	bl	80007d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a0a      	ldr	r2, [pc, #40]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000352:	621a      	str	r2, [r3, #32]
 8000354:	4a09      	ldr	r2, [pc, #36]	; (800037c <HAL_ADC_MspInit+0xe0>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	2012      	movs	r0, #18
 8000360:	f001 faa3 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000364:	2012      	movs	r0, #18
 8000366:	f001 fabc 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	; 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40012400 	.word	0x40012400
 8000378:	40021000 	.word	0x40021000
 800037c:	20000058 	.word	0x20000058
 8000380:	40020008 	.word	0x40020008

08000384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_DMA_Init+0x38>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <MX_DMA_Init+0x38>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_DMA_Init+0x38>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2100      	movs	r1, #0
 80003a6:	200b      	movs	r0, #11
 80003a8:	f001 fa7f 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003ac:	200b      	movs	r0, #11
 80003ae:	f001 fa98 	bl	80018e2 <HAL_NVIC_EnableIRQ>

}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08c      	sub	sp, #48	; 0x30
 80003c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 031c 	add.w	r3, r7, #28
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b70      	ldr	r3, [pc, #448]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a6f      	ldr	r2, [pc, #444]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b6d      	ldr	r3, [pc, #436]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ea:	61bb      	str	r3, [r7, #24]
 80003ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ee:	4b6a      	ldr	r3, [pc, #424]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a69      	ldr	r2, [pc, #420]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b67      	ldr	r3, [pc, #412]	; (8000598 <MX_GPIO_Init+0x1d8>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b64      	ldr	r3, [pc, #400]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a63      	ldr	r2, [pc, #396]	; (8000598 <MX_GPIO_Init+0x1d8>)
 800040c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b61      	ldr	r3, [pc, #388]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041e:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a5d      	ldr	r2, [pc, #372]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b5b      	ldr	r3, [pc, #364]	; (8000598 <MX_GPIO_Init+0x1d8>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000436:	4b58      	ldr	r3, [pc, #352]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a57      	ldr	r2, [pc, #348]	; (8000598 <MX_GPIO_Init+0x1d8>)
 800043c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b55      	ldr	r3, [pc, #340]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044e:	4b52      	ldr	r3, [pc, #328]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a51      	ldr	r2, [pc, #324]	; (8000598 <MX_GPIO_Init+0x1d8>)
 8000454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b4f      	ldr	r3, [pc, #316]	; (8000598 <MX_GPIO_Init+0x1d8>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DXL_DIR_GPIO_Port, DXL_DIR_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f001 fdf6 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4848      	ldr	r0, [pc, #288]	; (800059c <MX_GPIO_Init+0x1dc>)
 800047c:	f001 fdf0 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000486:	4845      	ldr	r0, [pc, #276]	; (800059c <MX_GPIO_Init+0x1dc>)
 8000488:	f001 fdea 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800048c:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8000490:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000492:	2303      	movs	r3, #3
 8000494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	4619      	mov	r1, r3
 80004a0:	483f      	ldr	r0, [pc, #252]	; (80005a0 <MX_GPIO_Init+0x1e0>)
 80004a2:	f001 fc63 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004a6:	23f0      	movs	r3, #240	; 0xf0
 80004a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004aa:	2303      	movs	r3, #3
 80004ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b2:	f107 031c 	add.w	r3, r7, #28
 80004b6:	4619      	mov	r1, r3
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f001 fc56 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80004c0:	f24c 03e7 	movw	r3, #49383	; 0xc0e7
 80004c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c6:	2303      	movs	r3, #3
 80004c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	4619      	mov	r1, r3
 80004d4:	4831      	ldr	r0, [pc, #196]	; (800059c <MX_GPIO_Init+0x1dc>)
 80004d6:	f001 fc49 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e0:	2303      	movs	r3, #3
 80004e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e8:	f107 031c 	add.w	r3, r7, #28
 80004ec:	4619      	mov	r1, r3
 80004ee:	482d      	ldr	r0, [pc, #180]	; (80005a4 <MX_GPIO_Init+0x1e4>)
 80004f0:	f001 fc3c 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 80004f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8000504:	f107 031c 	add.w	r3, r7, #28
 8000508:	4619      	mov	r1, r3
 800050a:	4827      	ldr	r0, [pc, #156]	; (80005a8 <MX_GPIO_Init+0x1e8>)
 800050c:	f001 fc2e 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DXL_DIR_Pin;
 8000510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	2301      	movs	r3, #1
 8000518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	2300      	movs	r3, #0
 8000520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DXL_DIR_GPIO_Port, &GPIO_InitStruct);
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4619      	mov	r1, r3
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f001 fc1e 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000530:	23c0      	movs	r3, #192	; 0xc0
 8000532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2303      	movs	r3, #3
 8000536:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	4619      	mov	r1, r3
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <MX_GPIO_Init+0x1ec>)
 8000544:	f001 fc12 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000548:	2304      	movs	r3, #4
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054c:	2303      	movs	r3, #3
 800054e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000554:	f107 031c 	add.w	r3, r7, #28
 8000558:	4619      	mov	r1, r3
 800055a:	4813      	ldr	r0, [pc, #76]	; (80005a8 <MX_GPIO_Init+0x1e8>)
 800055c:	f001 fc06 	bl	8001d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000560:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	2300      	movs	r3, #0
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	4619      	mov	r1, r3
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <MX_GPIO_Init+0x1dc>)
 800057a:	f001 fbf7 	bl	8001d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2017      	movs	r0, #23
 8000584:	f001 f991 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000588:	2017      	movs	r0, #23
 800058a:	f001 f9aa 	bl	80018e2 <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3730      	adds	r7, #48	; 0x30
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	48000400 	.word	0x48000400
 80005a0:	48000800 	.word	0x48000800
 80005a4:	48001000 	.word	0x48001000
 80005a8:	48000c00 	.word	0x48000c00
 80005ac:	48001400 	.word	0x48001400

080005b0 <NUfsr_IMU_Transmit>:

#include "imu.h"
#include "spi.h"

void NUfsr_IMU_Transmit(uint8_t adr, uint8_t dat, int byte_size)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	603a      	str	r2, [r7, #0]
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	460b      	mov	r3, r1
 80005be:	71bb      	strb	r3, [r7, #6]
	uint16_t pak = (adr << 8) | dat;
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	021b      	lsls	r3, r3, #8
 80005c4:	b21a      	sxth	r2, r3
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	817b      	strh	r3, [r7, #10]
	uint8_t* pak_ptr = (uint8_t*)&pak;
 80005d2:	f107 030a 	add.w	r3, r7, #10
 80005d6:	60fb      	str	r3, [r7, #12]

	HAL_SPI_Transmit(&hspi1, pak_ptr, byte_size, HAL_MAX_DELAY);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	b29a      	uxth	r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <NUfsr_IMU_Transmit+0x40>)
 80005e4:	f003 faf9 	bl	8003bda <HAL_SPI_Transmit>

}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000009c 	.word	0x2000009c

080005f4 <NUfsr_IMU_Init>:

	HAL_SPI_TransmitReceive(&hspi1, pak_ptr, (uint8_t*)dat_return, byte_size, HAL_MAX_DELAY);
}

void NUfsr_IMU_Init()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	// Implement series of commands to configure appropriate settings

	// Reset device: 0x6b, 0x80
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x80, 2);
 80005f8:	2202      	movs	r2, #2
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	206b      	movs	r0, #107	; 0x6b
 80005fe:	f7ff ffd7 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Turn off sleep mode:
	NUfsr_IMU_Transmit(PWR_MGMT_1, 0x00, 2);
 8000602:	2202      	movs	r2, #2
 8000604:	2100      	movs	r1, #0
 8000606:	206b      	movs	r0, #107	; 0x6b
 8000608:	f7ff ffd2 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Ensure we are in SPI mode
	NUfsr_IMU_Transmit(USER_CTRL, 0x10, 2);
 800060c:	2202      	movs	r2, #2
 800060e:	2110      	movs	r1, #16
 8000610:	206a      	movs	r0, #106	; 0x6a
 8000612:	f7ff ffcd 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Gyro Config
	NUfsr_IMU_Transmit(GYRO_CONFIG, 0x08, 2);
 8000616:	2202      	movs	r2, #2
 8000618:	2108      	movs	r1, #8
 800061a:	201b      	movs	r0, #27
 800061c:	f7ff ffc8 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Accel Config
	NUfsr_IMU_Transmit(ACCEL_CONFIG, 0x08, 2);
 8000620:	2202      	movs	r2, #2
 8000622:	2108      	movs	r1, #8
 8000624:	201c      	movs	r0, #28
 8000626:	f7ff ffc3 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Int config
	NUfsr_IMU_Transmit(INT_PIN_CFG, 0x20, 2);
 800062a:	2202      	movs	r2, #2
 800062c:	2120      	movs	r1, #32
 800062e:	2037      	movs	r0, #55	; 0x37
 8000630:	f7ff ffbe 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Interupt settings
	NUfsr_IMU_Transmit(INT_ENABLE, 0x01, 2);
 8000634:	2202      	movs	r2, #2
 8000636:	2101      	movs	r1, #1
 8000638:	2038      	movs	r0, #56	; 0x38
 800063a:	f7ff ffb9 	bl	80005b0 <NUfsr_IMU_Transmit>

	// Reset IMU int status
	NUfsr_IMU_Transmit(INT_STATUS | IMU_READ, 0x00, 2);
 800063e:	2202      	movs	r2, #2
 8000640:	2100      	movs	r1, #0
 8000642:	20ba      	movs	r0, #186	; 0xba
 8000644:	f7ff ffb4 	bl	80005b0 <NUfsr_IMU_Transmit>

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f000 fb79 	bl	8000d48 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f851 	bl	80006fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065a:	f7ff feb1 	bl	80003c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800065e:	f7ff fe91 	bl	8000384 <MX_DMA_Init>
  MX_ADC1_Init();
 8000662:	f7ff fdb1 	bl	80001c8 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000666:	f000 f8bb 	bl	80007e0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800066a:	f000 fa51 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800066e:	f000 fadb 	bl	8000c28 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 8000672:	f000 f9df 	bl	8000a34 <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000676:	f000 f8a1 	bl	80007bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  NUfsr_IMU_Init();
 800067a:	f7ff ffbb 	bl	80005f4 <NUfsr_IMU_Init>
  uint16_t Rx = 0x0000;
 800067e:	2300      	movs	r3, #0
 8000680:	817b      	strh	r3, [r7, #10]
  uint16_t* Ptr_Rx = &Rx;
 8000682:	f107 030a 	add.w	r3, r7, #10
 8000686:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  	count = 0;
    HAL_TIM_Base_Start(&htim3);
 8000688:	4819      	ldr	r0, [pc, #100]	; (80006f0 <main+0xa4>)
 800068a:	f003 fee3 	bl	8004454 <HAL_TIM_Base_Start>
  	HAL_ADC_Start_DMA(&hadc1, &adc_var, 4); // DMA Start
 800068e:	463b      	mov	r3, r7
 8000690:	2204      	movs	r2, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <main+0xa8>)
 8000696:	f000 fce1 	bl	800105c <HAL_ADC_Start_DMA>
  	while (1)
  	{
	  if ((adc_var[0] > 250) || (adc_var[3] > 250)) {
 800069a:	883b      	ldrh	r3, [r7, #0]
 800069c:	2bfa      	cmp	r3, #250	; 0xfa
 800069e:	d802      	bhi.n	80006a6 <main+0x5a>
 80006a0:	88fb      	ldrh	r3, [r7, #6]
 80006a2:	2bfa      	cmp	r3, #250	; 0xfa
 80006a4:	d906      	bls.n	80006b4 <main+0x68>
		  HAL_GPIO_WritePin(GPIOB,LED1_Pin,0);// LED ON
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <main+0xac>)
 80006ae:	f001 fcd7 	bl	8002060 <HAL_GPIO_WritePin>
 80006b2:	e005      	b.n	80006c0 <main+0x74>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB,LED1_Pin,1);// LED OFF
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <main+0xac>)
 80006bc:	f001 fcd0 	bl	8002060 <HAL_GPIO_WritePin>
	  }
	  if ((adc_var[1] > 250) || (adc_var[2] > 250)) {
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	2bfa      	cmp	r3, #250	; 0xfa
 80006c4:	d802      	bhi.n	80006cc <main+0x80>
 80006c6:	88bb      	ldrh	r3, [r7, #4]
 80006c8:	2bfa      	cmp	r3, #250	; 0xfa
 80006ca:	d906      	bls.n	80006da <main+0x8e>
		  HAL_GPIO_WritePin(GPIOB,LED2_Pin,0);// LED ON
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <main+0xac>)
 80006d4:	f001 fcc4 	bl	8002060 <HAL_GPIO_WritePin>
 80006d8:	e005      	b.n	80006e6 <main+0x9a>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOB,LED2_Pin,1);// LED OFF
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <main+0xac>)
 80006e2:	f001 fcbd 	bl	8002060 <HAL_GPIO_WritePin>
	  }

//	NUfsr_IMU_TransmitReceive(ACCEL_XOUT_L | IMU_READ, 0x00, Ptr_Rx, 1); //Previous code
//	NUfsr_UART_Transmit(&huart1, (void*)Ptr_Rx, 1);
	HAL_Delay(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f000 fb94 	bl	8000e14 <HAL_Delay>
	  if ((adc_var[0] > 250) || (adc_var[3] > 250)) {
 80006ec:	e7d5      	b.n	800069a <main+0x4e>
 80006ee:	bf00      	nop
 80006f0:	20000100 	.word	0x20000100
 80006f4:	20000028 	.word	0x20000028
 80006f8:	48000400 	.word	0x48000400

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09a      	sub	sp, #104	; 0x68
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000706:	2228      	movs	r2, #40	; 0x28
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 f8d1 	bl	80058b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	222c      	movs	r2, #44	; 0x2c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f8c3 	bl	80058b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 8000736:	2303      	movs	r3, #3
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073a:	2301      	movs	r3, #1
 800073c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000748:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800074c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fdac 	bl	80022b0 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800075e:	f000 f839 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fdd4 	bl	800332c <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800078a:	f000 f823 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <SystemClock_Config+0xbc>)
 8000790:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000796:	2300      	movs	r3, #0
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fffb 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007ac:	f000 f812 	bl	80007d4 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3768      	adds	r7, #104	; 0x68
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	00020081 	.word	0x00020081

080007bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2025      	movs	r0, #37	; 0x25
 80007c6:	f001 f870 	bl	80018aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ca:	2025      	movs	r0, #37	; 0x25
 80007cc:	f001 f889 	bl	80018e2 <HAL_NVIC_EnableIRQ>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_SPI1_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_SPI1_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_SPI1_Init+0x74>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI1_Init+0x74>)
 80007fa:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80007fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI1_Init+0x74>)
 8000802:	2202      	movs	r2, #2
 8000804:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_SPI1_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI1_Init+0x74>)
 800080e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000812:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI1_Init+0x74>)
 8000816:	2218      	movs	r2, #24
 8000818:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI1_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_SPI1_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI1_Init+0x74>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_SPI1_Init+0x74>)
 8000840:	f003 f920 	bl	8003a84 <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800084a:	f7ff ffc3 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000009c 	.word	0x2000009c
 8000858:	40013000 	.word	0x40013000

0800085c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_SPI_MspInit+0x8c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d130      	bne.n	80008e0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_SPI_MspInit+0x90>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <HAL_SPI_MspInit+0x90>)
 8000884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_SPI_MspInit+0x90>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_SPI_MspInit+0x90>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x90>)
 800089c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_SPI_MspInit+0x90>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> SPI1_NSS
    PC7     ------> SPI1_SCK
    PC8     ------> SPI1_MISO
    PC9     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MPU_NSS_Pin|MPU_CLK_Pin|MPU_MISO_Pin|MPU_MOSI_Pin;
 80008ae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c0:	2305      	movs	r3, #5
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4809      	ldr	r0, [pc, #36]	; (80008f0 <HAL_SPI_MspInit+0x94>)
 80008cc:	f001 fa4e 	bl	8001d6c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2023      	movs	r0, #35	; 0x23
 80008d6:	f000 ffe8 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008da:	2023      	movs	r0, #35	; 0x23
 80008dc:	f001 f801 	bl	80018e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x44>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x44>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 fa24 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <DMA1_Channel1_IRQHandler+0x10>)
 8000996:	f001 f8db 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000058 	.word	0x20000058

080009a4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <ADC1_IRQHandler+0x10>)
 80009aa:	f000 fbe7 	bl	800117c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000028 	.word	0x20000028

080009b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/*********************************/
	/* 	   ISR of MPU_INT Init	 	 */
	/*********************************/
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <EXTI9_5_IRQHandler+0x2c>)
 80009c2:	f001 fb65 	bl	8002090 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80009c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ca:	f000 fa23 	bl	8000e14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 80009ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <EXTI9_5_IRQHandler+0x2c>)
 80009d4:	f001 fb5c 	bl	8002090 <HAL_GPIO_TogglePin>


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 80009d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009dc:	f001 fb72 	bl	80020c4 <HAL_GPIO_EXTI_IRQHandler>
	/*********************************/
	/* 	  	   ISR of MPU_INT  	 	 */
	/*********************************/

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	48000400 	.word	0x48000400

080009e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <SPI1_IRQHandler+0x10>)
 80009ee:	f003 fa69 	bl	8003ec4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000009c 	.word	0x2000009c

080009fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <USART1_IRQHandler+0x10>)
 8000a02:	f004 f845 	bl	8004a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000150 	.word	0x20000150

08000a10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <SystemInit+0x20>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <SystemInit+0x20>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <MX_TIM3_Init+0x98>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a76:	4814      	ldr	r0, [pc, #80]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a78:	f003 fc9c 	bl	80043b4 <HAL_TIM_Base_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a82:	f7ff fea7 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000a94:	f003 fd3e 	bl	8004514 <HAL_TIM_ConfigClockSource>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f7ff fe99 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM3_Init+0x94>)
 8000ab0:	f003 ff2c 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000aba:	f7ff fe8b 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000100 	.word	0x20000100
 8000acc:	40000400 	.word	0x40000400

08000ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_TIM_Base_MspInit+0x38>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40021000 	.word	0x40021000

08000b10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b16:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <MX_USART1_UART_Init+0x5c>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x58>)
 8000b54:	f003 ff4e 	bl	80049f4 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f7ff fe39 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000150 	.word	0x20000150
 8000b6c:	40013800 	.word	0x40013800

08000b70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x8c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d12f      	bne.n	8000bf2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */
  huart1_ITh.Tx_State = Tx_FINISHED;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
  huart1_ITh.Rx_State = Rx_FINISHED;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	6153      	str	r3, [r2, #20]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x94>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DXL_P_Pin|DXL_N_Pin;
 8000bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be0:	2307      	movs	r3, #7
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bee:	f001 f8bd 	bl	8001d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40013800 	.word	0x40013800
 8000c00:	2000014c 	.word	0x2000014c
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */

/* ISR */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	/* Tx Complete Signal */
	huart1_ITh.Tx_State = Tx_FINISHED;
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <HAL_UART_TxCpltCallback+0x1c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000014c 	.word	0x2000014c

08000c28 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <MX_USB_PCD_Init+0x40>)
 8000c30:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c34:	2208      	movs	r2, #8
 8000c36:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_USB_PCD_Init+0x3c>)
 8000c52:	f001 fa5a 	bl	800210a <HAL_PCD_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c5c:	f7ff fdba 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200001d8 	.word	0x200001d8
 8000c68:	40005c00 	.word	0x40005c00

08000c6c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <HAL_PCD_MspInit+0x80>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d129      	bne.n	8000ce2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ca6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000cb8:	230e      	movs	r3, #14
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f001 f851 	bl	8001d6c <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a08      	ldr	r2, [pc, #32]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000cd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_PCD_MspInit+0x84>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005c00 	.word	0x40005c00
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d1e:	f7ff fe77 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f004 fdcf 	bl	80058c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d26:	f7ff fc91 	bl	800064c <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d38:	08005964 	.word	0x08005964
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d40:	200004c8 	.word	0x200004c8

08000d44 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <CAN_RX0_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 fd9b 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fdc6 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fdb3 	bl	80018fe <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 fd7b 	bl	80018aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	200004c4 	.word	0x200004c4

08000dfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200004c4 	.word	0x200004c4

08000e14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0be      	b.n	800104c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f9d6 	bl	800029c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fbbd 	bl	8001670 <ADC_ConversionStop_Disable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 8099 	bne.w	800103a <HAL_ADC_Init+0x18e>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8095 	bne.w	800103a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
                hadc->Init.ExternalTrigConv                      |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	005b      	lsls	r3, r3, #1
                hadc->Init.ExternalTrigConv                      |
 8000f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0xa2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0xa8>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0xaa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]

    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	035a      	lsls	r2, r3, #13
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e00b      	b.n	8000f98 <HAL_ADC_Init+0xec>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ADC_Init+0x1a8>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0x126>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	60fb      	str	r3, [r7, #12]
    }
    
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_Init+0x1ac>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001016:	e018      	b.n	800104a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f023 0312 	bic.w	r3, r3, #18
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	ffe1f7fd 	.word	0xffe1f7fd
 8001058:	ff1f0efe 	.word	0xff1f0efe

0800105c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_Start_DMA+0x1e>
 8001076:	2302      	movs	r3, #2
 8001078:	e076      	b.n	8001168 <HAL_ADC_Start_DMA+0x10c>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f000 fa9a 	bl	80015bc <ADC_Enable>
 8001088:	4603      	mov	r3, r0
 800108a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d169      	bne.n	8001166 <HAL_ADC_Start_DMA+0x10a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109a:	f023 0301 	bic.w	r3, r3, #1
 800109e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) */
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d0:	d106      	bne.n	80010e0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	f023 0206 	bic.w	r2, r3, #6
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010de:	e002      	b.n	80010e6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <HAL_ADC_Start_DMA+0x114>)
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a1e      	ldr	r2, [pc, #120]	; (8001174 <HAL_ADC_Start_DMA+0x118>)
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_ADC_Start_DMA+0x11c>)
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f06f 0202 	mvn.w	r2, #2
 800110e:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a18      	ldr	r0, [r3, #32]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	334c      	adds	r3, #76	; 0x4c
 800112a:	4619      	mov	r1, r3
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f000 fc38 	bl	80019a4 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800113e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001142:	d108      	bne.n	8001156 <HAL_ADC_Start_DMA+0xfa>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	e007      	b.n	8001166 <HAL_ADC_Start_DMA+0x10a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001164:	609a      	str	r2, [r3, #8]
    }
  }

  /* Return function status */
  return tmp_hal_status;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	080014f1 	.word	0x080014f1
 8001174:	0800156d 	.word	0x0800156d
 8001178:	08001589 	.word	0x08001589

0800117c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03e      	beq.n	800121c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d039      	beq.n	800121c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F37x devices, in case of sequencer enabled             */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)       && 
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ce:	d11d      	bne.n	800120c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)  )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)       && 
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d119      	bne.n	800120c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of single conversion interrupt  */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0220 	bic.w	r2, r2, #32
 80011e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d105      	bne.n	800120c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fe25 	bl	8000e5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f06f 0212 	mvn.w	r2, #18
 800121a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	2b00      	cmp	r3, #0
 8001224:	d04d      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d048      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	d105      	bne.n	8001248 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001240:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F37x devices, in case of sequencer enabled             */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001252:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001256:	d012      	beq.n	800127e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001262:	2b00      	cmp	r3, #0
 8001264:	d125      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001270:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001274:	d11d      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)  )         )   )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of single conversion interrupt  */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f821 	bl	80012fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f06f 020c 	mvn.w	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d012      	beq.n	80012f2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fdce 	bl	8000e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f06f 0201 	mvn.w	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x20>
 800132c:	2302      	movs	r3, #2
 800132e:	e0d2      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x1c6>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6U */
  if (sConfig->Rank < 7U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d81c      	bhi.n	800137a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b05      	subs	r3, #5
 8001352:	221f      	movs	r2, #31
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	4019      	ands	r1, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	3b05      	subs	r3, #5
 800136c:	fa00 f203 	lsl.w	r2, r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
 8001378:	e03c      	b.n	80013f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12U */
  else if (sConfig->Rank < 13U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d81c      	bhi.n	80013bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3b23      	subs	r3, #35	; 0x23
 8001394:	221f      	movs	r2, #31
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	4019      	ands	r1, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b23      	subs	r3, #35	; 0x23
 80013ae:	fa00 f203 	lsl.w	r2, r0, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ba:	e01b      	b.n	80013f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16U */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b41      	subs	r3, #65	; 0x41
 80013ce:	221f      	movs	r2, #31
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4019      	ands	r1, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b41      	subs	r3, #65	; 0x41
 80013e8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	430a      	orrs	r2, r1
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 18U */
  if (sConfig->Channel > ADC_CHANNEL_10)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b0a      	cmp	r3, #10
 80013fa:	d91c      	bls.n	8001436 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68d9      	ldr	r1, [r3, #12]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	3b1e      	subs	r3, #30
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	4019      	ands	r1, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6898      	ldr	r0, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	3b1e      	subs	r3, #30
 8001428:	fa00 f203 	lsl.w	r2, r0, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	e019      	b.n	800146a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else   /* For channels 0 to 9U */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6919      	ldr	r1, [r3, #16]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	2207      	movs	r2, #7
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	4019      	ands	r1, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6898      	ldr	r0, [r3, #8]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	fa00 f203 	lsl.w	r2, r0, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b10      	cmp	r3, #16
 8001470:	d003      	beq.n	800147a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001476:	2b11      	cmp	r3, #17
 8001478:	d11e      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1a8>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001488:	609a      	str	r2, [r3, #8]
    
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d11c      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1bc>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_ADC_ConfigChannel+0x1d4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_ADC_ConfigChannel+0x1d8>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9a      	lsrs	r2, r3, #18
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1a0>
      {
        wait_loop_index--;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x19a>
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014b6:	e009      	b.n	80014cc <HAL_ADC_ConfigChannel+0x1bc>
      }
    }
  }
  /* if ADC1 Channel_18 is selected, enable VBAT measurement path */
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b12      	cmp	r3, #18
 80014be:	d105      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1bc>
  {
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_ADC_ConfigChannel+0x1dc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_ADC_ConfigChannel+0x1dc>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ca:	6013      	str	r3, [r2, #0]
  }

   
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000000 	.word	0x20000000
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	40010000 	.word	0x40010000

080014f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001506:	2b00      	cmp	r3, #0
 8001508:	d127      	bne.n	800155a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001520:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001524:	d115      	bne.n	8001552 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800152a:	2b00      	cmp	r3, #0
 800152c:	d111      	bne.n	8001552 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d105      	bne.n	8001552 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	f043 0201 	orr.w	r2, r3, #1
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fc82 	bl	8000e5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001558:	e004      	b.n	8001564 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff fc78 	bl	8000e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	f043 0204 	orr.w	r2, r3, #4
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fc72 	bl	8000e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d040      	beq.n	800165c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <ADC_Enable+0xac>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1f      	ldr	r2, [pc, #124]	; (800166c <ADC_Enable+0xb0>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	0c9b      	lsrs	r3, r3, #18
 80015f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015f8:	e002      	b.n	8001600 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001606:	f7ff fbf9 	bl	8000dfc <HAL_GetTick>
 800160a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800160c:	e01f      	b.n	800164e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800160e:	f7ff fbf5 	bl	8000dfc <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d918      	bls.n	800164e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d011      	beq.n	800164e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f043 0210 	orr.w	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e007      	b.n	800165e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b01      	cmp	r3, #1
 800165a:	d1d8      	bne.n	800160e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_ConversionStop_Disable>:
  * @brief  Stop ADC conversion and disable the selected ADC
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b01      	cmp	r3, #1
 8001688:	d12e      	bne.n	80016e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800169a:	f7ff fbaf 	bl	8000dfc <HAL_GetTick>
 800169e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016a0:	e01b      	b.n	80016da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016a2:	f7ff fbab 	bl	8000dfc <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d914      	bls.n	80016da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10d      	bne.n	80016da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e007      	b.n	80016ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d0dc      	beq.n	80016a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	; (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018bc:	f7ff ff3e 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	68b9      	ldr	r1, [r7, #8]
 80018c6:	6978      	ldr	r0, [r7, #20]
 80018c8:	f7ff ff8e 	bl	80017e8 <NVIC_EncodePriority>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <__NVIC_SetPriority>
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff31 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa2 	bl	8001850 <SysTick_Config>
 800190c:	4603      	mov	r3, r0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e037      	b.n	800199c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001942:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001946:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f9b8 	bl	8001cf4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}  
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Start_IT+0x20>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e04a      	b.n	8001a5a <HAL_DMA_Start_IT+0xb6>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d13a      	bne.n	8001a4c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f94b 	bl	8001c96 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 020e 	orr.w	r2, r2, #14
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e00f      	b.n	8001a3a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 020a 	orr.w	r2, r2, #10
 8001a28:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0204 	bic.w	r2, r2, #4
 8001a38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0201 	orr.w	r2, r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e005      	b.n	8001a58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
 8001a56:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d008      	beq.n	8001a86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2204      	movs	r2, #4
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e020      	b.n	8001ac8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020e 	bic.w	r2, r2, #14
 8001a94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d005      	beq.n	8001af6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2204      	movs	r2, #4
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e027      	b.n	8001b46 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020e 	bic.w	r2, r2, #14
 8001b04:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	4798      	blx	r3
    } 
  }
  return status;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d024      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x72>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01f      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0204 	bic.w	r2, r2, #4
 8001b9e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	2104      	movs	r1, #4
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d06a      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bc0:	e065      	b.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02c      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xdc>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d027      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 020a 	bic.w	r2, r2, #10
 8001bf8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d035      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c2a:	e030      	b.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	2208      	movs	r2, #8
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d028      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d023      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020e 	bic.w	r2, r2, #14
 8001c54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5e:	2101      	movs	r1, #1
 8001c60:	fa01 f202 	lsl.w	r2, r1, r2
 8001c64:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	4798      	blx	r3
    }
  }
}  
 8001c8c:	e7ff      	b.n	8001c8e <HAL_DMA_IRQHandler+0x13e>
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d108      	bne.n	8001cd6 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cd4:	e007      	b.n	8001ce6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	60da      	str	r2, [r3, #12]
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <DMA_CalcBaseAndBitshift+0x60>)
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d80f      	bhi.n	8001d28 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <DMA_CalcBaseAndBitshift+0x64>)
 8001d10:	4413      	add	r3, r2
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <DMA_CalcBaseAndBitshift+0x68>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a0f      	ldr	r2, [pc, #60]	; (8001d60 <DMA_CalcBaseAndBitshift+0x6c>)
 8001d24:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001d26:	e00e      	b.n	8001d46 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <DMA_CalcBaseAndBitshift+0x70>)
 8001d30:	4413      	add	r3, r2
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <DMA_CalcBaseAndBitshift+0x68>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	009a      	lsls	r2, r3, #2
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <DMA_CalcBaseAndBitshift+0x74>)
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40020407 	.word	0x40020407
 8001d58:	bffdfff8 	.word	0xbffdfff8
 8001d5c:	cccccccd 	.word	0xcccccccd
 8001d60:	40020000 	.word	0x40020000
 8001d64:	bffdfbf8 	.word	0xbffdfbf8
 8001d68:	40020400 	.word	0x40020400

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e154      	b.n	8002026 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8146 	beq.w	8002020 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 80a0 	beq.w	8002020 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <HAL_GPIO_Init+0x2d8>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef8:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f22:	d019      	beq.n	8001f58 <HAL_GPIO_Init+0x1ec>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a49      	ldr	r2, [pc, #292]	; (800204c <HAL_GPIO_Init+0x2e0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_GPIO_Init+0x1e8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2e4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00d      	beq.n	8001f50 <HAL_GPIO_Init+0x1e4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_GPIO_Init+0x2e8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <HAL_GPIO_Init+0x1e0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_GPIO_Init+0x2ec>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_GPIO_Init+0x1dc>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e008      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f48:	2305      	movs	r3, #5
 8001f4a:	e006      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e004      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_GPIO_Init+0x1ee>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	f002 0203 	and.w	r2, r2, #3
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	4093      	lsls	r3, r2
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6a:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_GPIO_Init+0x2dc>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f9c:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fc6:	4a25      	ldr	r2, [pc, #148]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_GPIO_Init+0x2f0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_GPIO_Init+0x2f0>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	f47f aea3 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	371c      	adds	r7, #28
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000
 800204c:	48000400 	.word	0x48000400
 8002050:	48000800 	.word	0x48000800
 8002054:	48000c00 	.word	0x48000c00
 8002058:	48001000 	.word	0x48001000
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800207c:	e002      	b.n	8002084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	43d9      	mvns	r1, r3
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	400b      	ands	r3, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	619a      	str	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f806 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800210a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210c:	b08b      	sub	sp, #44	; 0x2c
 800210e:	af06      	add	r7, sp, #24
 8002110:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0c4      	b.n	80022a6 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe fd9b 	bl	8000c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fb79 	bl	800583a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
 800214c:	e040      	b.n	80021d0 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	3301      	adds	r3, #1
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3303      	adds	r3, #3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3338      	adds	r3, #56	; 0x38
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	333c      	adds	r3, #60	; 0x3c
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3340      	adds	r3, #64	; 0x40
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3301      	adds	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3b9      	bcc.n	800214e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e044      	b.n	800226a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	3301      	adds	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d3b5      	bcc.n	80021e0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	687e      	ldr	r6, [r7, #4]
 800227c:	466d      	mov	r5, sp
 800227e:	f106 0410 	add.w	r4, r6, #16
 8002282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	1d33      	adds	r3, r6, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f003 faee 	bl	8005870 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f001 b823 	b.w	800331c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 817d 	beq.w	80025e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022ec:	4bbc      	ldr	r3, [pc, #752]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f8:	4bb9      	ldr	r3, [pc, #740]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d15c      	bne.n	80023be <HAL_RCC_OscConfig+0x10e>
 8002304:	4bb6      	ldr	r3, [pc, #728]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d155      	bne.n	80023be <HAL_RCC_OscConfig+0x10e>
 8002312:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002316:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002326:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d102      	bne.n	8002344 <HAL_RCC_OscConfig+0x94>
 800233e:	4ba8      	ldr	r3, [pc, #672]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	e015      	b.n	8002370 <HAL_RCC_OscConfig+0xc0>
 8002344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002348:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002358:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002360:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800236c:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002374:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002378:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800237c:	fa92 f2a2 	rbit	r2, r2
 8002380:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002384:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f002 021f 	and.w	r2, r2, #31
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f202 	lsl.w	r2, r1, r2
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 811f 	beq.w	80025e4 <HAL_RCC_OscConfig+0x334>
 80023a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 8116 	bne.w	80025e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f000 bfaf 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x12e>
 80023d0:	4b83      	ldr	r3, [pc, #524]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a82      	ldr	r2, [pc, #520]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	e036      	b.n	800244c <HAL_RCC_OscConfig+0x19c>
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x158>
 80023ee:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a7b      	ldr	r2, [pc, #492]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a78      	ldr	r2, [pc, #480]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e021      	b.n	800244c <HAL_RCC_OscConfig+0x19c>
 8002408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x184>
 800241a:	4b71      	ldr	r3, [pc, #452]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a70      	ldr	r2, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b6e      	ldr	r3, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6d      	ldr	r2, [pc, #436]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x19c>
 8002434:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800244c:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f023 020f 	bic.w	r2, r3, #15
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	495f      	ldr	r1, [pc, #380]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002462:	4313      	orrs	r3, r2
 8002464:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d059      	beq.n	800252a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe fcc1 	bl	8000dfc <HAL_GetTick>
 800247a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002480:	f7fe fcbc 	bl	8000dfc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d902      	bls.n	8002496 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	f000 bf43 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 8002496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80024aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_RCC_OscConfig+0x218>
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	e015      	b.n	80024f4 <HAL_RCC_OscConfig+0x244>
 80024c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002500:	fa92 f2a2 	rbit	r2, r2
 8002504:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002508:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800250c:	fab2 f282 	clz	r2, r2
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	f042 0220 	orr.w	r2, r2, #32
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f002 021f 	and.w	r2, r2, #31
 800251c:	2101      	movs	r1, #1
 800251e:	fa01 f202 	lsl.w	r2, r1, r2
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ab      	beq.n	8002480 <HAL_RCC_OscConfig+0x1d0>
 8002528:	e05d      	b.n	80025e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fc67 	bl	8000dfc <HAL_GetTick>
 800252e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe fc62 	bl	8000dfc <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b64      	cmp	r3, #100	; 0x64
 8002542:	d902      	bls.n	800254a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	f000 bee9 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 800254a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002556:	fa93 f3a3 	rbit	r3, r3
 800255a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800255e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	b2db      	uxtb	r3, r3
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d102      	bne.n	800257c <HAL_RCC_OscConfig+0x2cc>
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	e015      	b.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
 800257c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002580:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002594:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002598:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_RCC_OscConfig+0x330>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ac:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80025b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025b4:	fa92 f2a2 	rbit	r2, r2
 80025b8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80025bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ab      	bne.n	8002534 <HAL_RCC_OscConfig+0x284>
 80025dc:	e003      	b.n	80025e6 <HAL_RCC_OscConfig+0x336>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 817d 	beq.w	80028f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025fc:	4ba6      	ldr	r3, [pc, #664]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002608:	4ba3      	ldr	r3, [pc, #652]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b08      	cmp	r3, #8
 8002612:	d172      	bne.n	80026fa <HAL_RCC_OscConfig+0x44a>
 8002614:	4ba0      	ldr	r3, [pc, #640]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d16c      	bne.n	80026fa <HAL_RCC_OscConfig+0x44a>
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002632:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d102      	bne.n	8002650 <HAL_RCC_OscConfig+0x3a0>
 800264a:	4b93      	ldr	r3, [pc, #588]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	e013      	b.n	8002678 <HAL_RCC_OscConfig+0x3c8>
 8002650:	2302      	movs	r3, #2
 8002652:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002668:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	2202      	movs	r2, #2
 800267a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800267e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002682:	fa92 f2a2 	rbit	r2, r2
 8002686:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800268a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800268e:	fab2 f282 	clz	r2, r2
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	f002 021f 	and.w	r2, r2, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f202 	lsl.w	r2, r1, r2
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCC_OscConfig+0x410>
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d002      	beq.n	80026c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f000 be2e 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c0:	4b75      	ldr	r3, [pc, #468]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	21f8      	movs	r1, #248	; 0xf8
 80026d6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026de:	fa91 f1a1 	rbit	r1, r1
 80026e2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026ea:	fab1 f181 	clz	r1, r1
 80026ee:	b2c9      	uxtb	r1, r1
 80026f0:	408b      	lsls	r3, r1
 80026f2:	4969      	ldr	r1, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f8:	e0fd      	b.n	80028f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8088 	beq.w	800281c <HAL_RCC_OscConfig+0x56c>
 800270c:	2301      	movs	r3, #1
 800270e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800271e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	461a      	mov	r2, r3
 8002734:	2301      	movs	r3, #1
 8002736:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe fb60 	bl	8000dfc <HAL_GetTick>
 800273c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fb5b 	bl	8000dfc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d902      	bls.n	8002758 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	f000 bde2 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800276a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_RCC_OscConfig+0x4d8>
 8002782:	4b45      	ldr	r3, [pc, #276]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	e013      	b.n	80027b0 <HAL_RCC_OscConfig+0x500>
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80027a4:	fa93 f3a3 	rbit	r3, r3
 80027a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80027ac:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2202      	movs	r2, #2
 80027b2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80027b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027ba:	fa92 f2a2 	rbit	r2, r2
 80027be:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80027c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027c6:	fab2 f282 	clz	r2, r2
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	f042 0220 	orr.w	r2, r2, #32
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f002 021f 	and.w	r2, r2, #31
 80027d6:	2101      	movs	r1, #1
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0af      	beq.n	8002742 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	21f8      	movs	r1, #248	; 0xf8
 80027f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002800:	fa91 f1a1 	rbit	r1, r1
 8002804:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002808:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800280c:	fab1 f181 	clz	r1, r1
 8002810:	b2c9      	uxtb	r1, r1
 8002812:	408b      	lsls	r3, r1
 8002814:	4920      	ldr	r1, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
 800281a:	e06c      	b.n	80028f6 <HAL_RCC_OscConfig+0x646>
 800281c:	2301      	movs	r3, #1
 800281e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800282e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2300      	movs	r3, #0
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fad8 	bl	8000dfc <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7fe fad3 	bl	8000dfc <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	f000 bd5a 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800287a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d104      	bne.n	800289c <HAL_RCC_OscConfig+0x5ec>
 8002892:	4b01      	ldr	r3, [pc, #4]	; (8002898 <HAL_RCC_OscConfig+0x5e8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e015      	b.n	80028c4 <HAL_RCC_OscConfig+0x614>
 8002898:	40021000 	.word	0x40021000
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80028c0:	4bc8      	ldr	r3, [pc, #800]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	2202      	movs	r2, #2
 80028c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028ce:	fa92 f2a2 	rbit	r2, r2
 80028d2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80028d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0220 	orr.w	r2, r2, #32
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1ad      	bne.n	8002852 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8110 	beq.w	8002b2c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800290c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d079      	beq.n	8002a10 <HAL_RCC_OscConfig+0x760>
 800291c:	2301      	movs	r3, #1
 800291e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800292e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4bab      	ldr	r3, [pc, #684]	; (8002be8 <HAL_RCC_OscConfig+0x938>)
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	2301      	movs	r3, #1
 8002944:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe fa59 	bl	8000dfc <HAL_GetTick>
 800294a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fa54 	bl	8000dfc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d902      	bls.n	8002966 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	f000 bcdb 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029a4:	2202      	movs	r2, #2
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	fa93 f2a3 	rbit	r2, r3
 80029b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c0:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 80029c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029cc:	2102      	movs	r1, #2
 80029ce:	6019      	str	r1, [r3, #0]
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	fa93 f1a3 	rbit	r1, r3
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029e6:	6019      	str	r1, [r3, #0]
  return result;
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0a0      	beq.n	8002950 <HAL_RCC_OscConfig+0x6a0>
 8002a0e:	e08d      	b.n	8002b2c <HAL_RCC_OscConfig+0x87c>
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fa93 f2a3 	rbit	r2, r3
 8002a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a32:	601a      	str	r2, [r3, #0]
  return result;
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a3c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <HAL_RCC_OscConfig+0x938>)
 8002a48:	4413      	add	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a52:	f7fe f9d3 	bl	8000dfc <HAL_GetTick>
 8002a56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5c:	f7fe f9ce 	bl	8000dfc <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	f000 bc55 	b.w	800331c <HAL_RCC_OscConfig+0x106c>
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002adc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ade:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002aea:	2102      	movs	r1, #2
 8002aec:	6019      	str	r1, [r3, #0]
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	fa93 f1a3 	rbit	r1, r3
 8002afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b04:	6019      	str	r1, [r3, #0]
  return result;
 8002b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d197      	bne.n	8002a5c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 81a1 	beq.w	8002e84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b48:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	61d3      	str	r3, [r2, #28]
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_RCC_OscConfig+0x93c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_RCC_OscConfig+0x93c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <HAL_RCC_OscConfig+0x93c>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe f92f 	bl	8000dfc <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe f92a 	bl	8000dfc <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e3b1      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCC_OscConfig+0x93c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ef      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10d      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x940>
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_RCC_OscConfig+0x934>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6213      	str	r3, [r2, #32]
 8002be0:	e03c      	b.n	8002c5c <HAL_RCC_OscConfig+0x9ac>
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	10908120 	.word	0x10908120
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x96a>
 8002c00:	4bc1      	ldr	r3, [pc, #772]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4ac0      	ldr	r2, [pc, #768]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c06:	f023 0301 	bic.w	r3, r3, #1
 8002c0a:	6213      	str	r3, [r2, #32]
 8002c0c:	4bbe      	ldr	r3, [pc, #760]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4abd      	ldr	r2, [pc, #756]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6213      	str	r3, [r2, #32]
 8002c18:	e020      	b.n	8002c5c <HAL_RCC_OscConfig+0x9ac>
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x994>
 8002c2a:	4bb7      	ldr	r3, [pc, #732]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4ab6      	ldr	r2, [pc, #728]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6213      	str	r3, [r2, #32]
 8002c36:	4bb4      	ldr	r3, [pc, #720]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4ab3      	ldr	r2, [pc, #716]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0x9ac>
 8002c44:	4bb0      	ldr	r3, [pc, #704]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4aaf      	ldr	r2, [pc, #700]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6213      	str	r3, [r2, #32]
 8002c50:	4bad      	ldr	r3, [pc, #692]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4aac      	ldr	r2, [pc, #688]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8081 	beq.w	8002d70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f8c5 	bl	8000dfc <HAL_GetTick>
 8002c72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fe f8c0 	bl	8000dfc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e345      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	fa93 f2a3 	rbit	r2, r3
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002cd6:	601a      	str	r2, [r3, #0]
  return result;
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002ce0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_OscConfig+0xa4c>
 8002cf6:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	e013      	b.n	8002d24 <HAL_RCC_OscConfig+0xa74>
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d04:	2202      	movs	r2, #2
 8002d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	fa93 f2a3 	rbit	r2, r3
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	6011      	str	r1, [r2, #0]
 8002d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d34:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	fa92 f1a2 	rbit	r1, r2
 8002d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d46:	6011      	str	r1, [r2, #0]
  return result;
 8002d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d4c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	fab2 f282 	clz	r2, r2
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	f002 021f 	and.w	r2, r2, #31
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d084      	beq.n	8002c78 <HAL_RCC_OscConfig+0x9c8>
 8002d6e:	e07f      	b.n	8002e70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d70:	f7fe f844 	bl	8000dfc <HAL_GetTick>
 8002d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f83f 	bl	8000dfc <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e2c4      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	fa93 f2a3 	rbit	r2, r3
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002dd8:	601a      	str	r2, [r3, #0]
  return result;
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002de2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0xb4e>
 8002df8:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	e013      	b.n	8002e26 <HAL_RCC_OscConfig+0xb76>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e06:	2202      	movs	r2, #2
 8002e08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e2e:	2102      	movs	r1, #2
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e36:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fa92 f1a2 	rbit	r1, r2
 8002e40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e48:	6011      	str	r1, [r2, #0]
  return result;
 8002e4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e4e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f002 021f 	and.w	r2, r2, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d184      	bne.n	8002d7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e70:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8242 	beq.w	800331a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e96:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_RCC_OscConfig+0xc58>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	f000 8213 	beq.w	80032ca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f040 8162 	bne.w	800317a <HAL_RCC_OscConfig+0xeca>
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002eda:	601a      	str	r2, [r3, #0]
  return result;
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ee4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fd ff7e 	bl	8000dfc <HAL_GetTick>
 8002f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	e00c      	b.n	8002f20 <HAL_RCC_OscConfig+0xc70>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fd ff76 	bl	8000dfc <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1fd      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
 8002f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f24:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	fa93 f2a3 	rbit	r2, r3
 8002f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f44:	601a      	str	r2, [r3, #0]
  return result;
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f50:	fab3 f383 	clz	r3, r3
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d102      	bne.n	8002f6a <HAL_RCC_OscConfig+0xcba>
 8002f64:	4bb0      	ldr	r3, [pc, #704]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	e027      	b.n	8002fba <HAL_RCC_OscConfig+0xd0a>
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	fa93 f2a3 	rbit	r2, r3
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	4b9c      	ldr	r3, [pc, #624]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fbe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fc6:	6011      	str	r1, [r2, #0]
 8002fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fcc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	fa92 f1a2 	rbit	r1, r2
 8002fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fda:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fde:	6011      	str	r1, [r2, #0]
  return result;
 8002fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	fab2 f282 	clz	r2, r2
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f002 021f 	and.w	r2, r2, #31
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8003000:	4013      	ands	r3, r2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d182      	bne.n	8002f0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800300e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	430b      	orrs	r3, r1
 8003028:	497f      	ldr	r1, [pc, #508]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800305c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	2301      	movs	r3, #1
 8003072:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fd fec2 	bl	8000dfc <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	e009      	b.n	8003092 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd febd 	bl	8000dfc <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e144      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800309a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030b6:	601a      	str	r2, [r3, #0]
  return result;
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80030c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d102      	bne.n	80030dc <HAL_RCC_OscConfig+0xe2c>
 80030d6:	4b54      	ldr	r3, [pc, #336]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	e027      	b.n	800312c <HAL_RCC_OscConfig+0xe7c>
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003106:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800310a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f2a3 	rbit	r2, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003130:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	fa92 f1a2 	rbit	r1, r2
 8003148:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800314c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003150:	6011      	str	r1, [r2, #0]
  return result;
 8003152:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003156:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	fab2 f282 	clz	r2, r2
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	f042 0220 	orr.w	r2, r2, #32
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f002 021f 	and.w	r2, r2, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d082      	beq.n	800307e <HAL_RCC_OscConfig+0xdce>
 8003178:	e0cf      	b.n	800331a <HAL_RCC_OscConfig+0x106a>
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003182:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	fa93 f2a3 	rbit	r2, r3
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800319e:	601a      	str	r2, [r3, #0]
  return result;
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80031a8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fd fe1c 	bl	8000dfc <HAL_GetTick>
 80031c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c8:	e009      	b.n	80031de <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fd fe17 	bl	8000dfc <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e09e      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	fa93 f2a3 	rbit	r2, r3
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003202:	601a      	str	r2, [r3, #0]
  return result;
 8003204:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003208:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800320c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d104      	bne.n	800322c <HAL_RCC_OscConfig+0xf7c>
 8003222:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_RCC_OscConfig+0xf78>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	e029      	b.n	800327c <HAL_RCC_OscConfig+0xfcc>
 8003228:	40021000 	.word	0x40021000
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800325a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003264:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	fa93 f2a3 	rbit	r2, r3
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <HAL_RCC_OscConfig+0x1078>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003280:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003288:	6011      	str	r1, [r2, #0]
 800328a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800328e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	fa92 f1a2 	rbit	r1, r2
 8003298:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800329c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032a0:	6011      	str	r1, [r2, #0]
  return result;
 80032a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	fab2 f282 	clz	r2, r2
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f042 0220 	orr.w	r2, r2, #32
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	f002 021f 	and.w	r2, r2, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f202 	lsl.w	r2, r1, r2
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d180      	bne.n	80031ca <HAL_RCC_OscConfig+0xf1a>
 80032c8:	e027      	b.n	800331a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e01e      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x1078>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032e6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10b      	bne.n	8003316 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003306:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000

0800332c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b09e      	sub	sp, #120	; 0x78
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e162      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 0207 	bic.w	r2, r3, #7
 800335a:	498b      	ldr	r1, [pc, #556]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b89      	ldr	r3, [pc, #548]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e14a      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b82      	ldr	r3, [pc, #520]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	497f      	ldr	r1, [pc, #508]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80dc 	beq.w	8003558 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d13c      	bne.n	8003422 <HAL_RCC_ClockConfig+0xf6>
 80033a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b0:	fa93 f3a3 	rbit	r3, r3
 80033b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d102      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xa6>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	e00f      	b.n	80033f2 <HAL_RCC_ClockConfig+0xc6>
 80033d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	667b      	str	r3, [r7, #100]	; 0x64
 80033e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60
 80033e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80033f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d17b      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e0f3      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d13c      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x178>
 800342a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_RCC_ClockConfig+0x128>
 800344e:	4b4f      	ldr	r3, [pc, #316]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e00f      	b.n	8003474 <HAL_RCC_ClockConfig+0x148>
 8003454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
 8003462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003466:	643b      	str	r3, [r7, #64]	; 0x40
 8003468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	63ba      	str	r2, [r7, #56]	; 0x38
 800347a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	f042 0220 	orr.w	r2, r2, #32
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f002 021f 	and.w	r2, r2, #31
 8003494:	2101      	movs	r1, #1
 8003496:	fa01 f202 	lsl.w	r2, r1, r2
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d13a      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0b2      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
 80034a4:	2302      	movs	r3, #2
 80034a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_ClockConfig+0x1a0>
 80034c6:	4b31      	ldr	r3, [pc, #196]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_ClockConfig+0x1bc>
 80034cc:	2302      	movs	r3, #2
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2202      	movs	r2, #2
 80034ea:	61ba      	str	r2, [r7, #24]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	617a      	str	r2, [r7, #20]
  return result;
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e079      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f023 0203 	bic.w	r2, r3, #3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	491a      	ldr	r1, [pc, #104]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003528:	f7fd fc68 	bl	8000dfc <HAL_GetTick>
 800352c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	e00a      	b.n	8003546 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fd fc64 	bl	8000dfc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e061      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_RCC_ClockConfig+0x260>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f003 020c 	and.w	r2, r3, #12
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	429a      	cmp	r2, r3
 8003556:	d1eb      	bne.n	8003530 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d214      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 0207 	bic.w	r2, r3, #7
 800356e:	4906      	ldr	r1, [pc, #24]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCC_ClockConfig+0x25c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e040      	b.n	800360a <HAL_RCC_ClockConfig+0x2de>
 8003588:	40022000 	.word	0x40022000
 800358c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	491a      	ldr	r1, [pc, #104]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4912      	ldr	r1, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035ce:	f000 f829 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035d2:	4601      	mov	r1, r0
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCC_ClockConfig+0x2e8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035dc:	22f0      	movs	r2, #240	; 0xf0
 80035de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	fa92 f2a2 	rbit	r2, r2
 80035e6:	60fa      	str	r2, [r7, #12]
  return result;
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	fab2 f282 	clz	r2, r2
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	40d3      	lsrs	r3, r2
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <HAL_RCC_ClockConfig+0x2ec>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	fa21 f303 	lsr.w	r3, r1, r3
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <HAL_RCC_ClockConfig+0x2f0>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCC_ClockConfig+0x2f4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fbb6 	bl	8000d74 <HAL_InitTick>
  
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3778      	adds	r7, #120	; 0x78
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	08005924 	.word	0x08005924
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b08b      	sub	sp, #44	; 0x2c
 8003628:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	2300      	movs	r3, #0
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d002      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x30>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d003      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x36>
 8003652:	e03c      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003656:	623b      	str	r3, [r7, #32]
      break;
 8003658:	e03c      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003660:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003664:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	607a      	str	r2, [r7, #4]
  return result;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	40d3      	lsrs	r3, r2
 8003678:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	220f      	movs	r2, #15
 8003688:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	fa92 f2a2 	rbit	r2, r2
 8003690:	60fa      	str	r2, [r7, #12]
  return result;
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	fab2 f282 	clz	r2, r2
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	40d3      	lsrs	r3, r2
 800369c:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	e004      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	4a0c      	ldr	r2, [pc, #48]	; (80036f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	623b      	str	r3, [r7, #32]
      break;
 80036cc:	e002      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80036d0:	623b      	str	r3, [r7, #32]
      break;
 80036d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	372c      	adds	r7, #44	; 0x2c
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	01e84800 	.word	0x01e84800
 80036ec:	0800593c 	.word	0x0800593c
 80036f0:	0800594c 	.word	0x0800594c
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800371a:	f7ff ffef 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371e:	4601      	mov	r1, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003728:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800372c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	fa92 f2a2 	rbit	r2, r2
 8003734:	603a      	str	r2, [r7, #0]
  return result;
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	fab2 f282 	clz	r2, r2
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	40d3      	lsrs	r3, r2
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08005934 	.word	0x08005934

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800375e:	f7ff ffcd 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003762:	4601      	mov	r1, r0
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800376c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003770:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	fa92 f2a2 	rbit	r2, r2
 8003778:	603a      	str	r2, [r7, #0]
  return result;
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	fab2 f282 	clz	r2, r2
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	40d3      	lsrs	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	08005934 	.word	0x08005934

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b092      	sub	sp, #72	; 0x48
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80d4 	beq.w	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c0:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10e      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	4a4a      	ldr	r2, [pc, #296]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	61d3      	str	r3, [r2, #28]
 80037d8:	4b48      	ldr	r3, [pc, #288]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ea:	4b45      	ldr	r3, [pc, #276]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d118      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f6:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fd fafb 	bl	8000dfc <HAL_GetTick>
 8003806:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd faf7 	bl	8000dfc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e12d      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8084 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003844:	429a      	cmp	r2, r3
 8003846:	d07c      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	461a      	mov	r2, r3
 8003872:	2301      	movs	r3, #1
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003886:	fab3 f383 	clz	r3, r3
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800389a:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04b      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fd faa7 	bl	8000dfc <HAL_GetTick>
 80038ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd faa3 	bl	8000dfc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0d7      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80038c8:	2302      	movs	r3, #2
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	fa93 f3a3 	rbit	r3, r3
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	2302      	movs	r3, #2
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	61fb      	str	r3, [r7, #28]
  return result;
 80038e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d108      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038f6:	4b01      	ldr	r3, [pc, #4]	; (80038fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	e00d      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
 8003904:	10908100 	.word	0x10908100
 8003908:	2302      	movs	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2202      	movs	r2, #2
 800391a:	613a      	str	r2, [r7, #16]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	60fa      	str	r2, [r7, #12]
  return result;
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	fab2 f282 	clz	r2, r2
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f002 021f 	and.w	r2, r2, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f202 	lsl.w	r2, r1, r2
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0b7      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003942:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	494c      	ldr	r1, [pc, #304]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	4a47      	ldr	r2, [pc, #284]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003974:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	f023 0203 	bic.w	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	493f      	ldr	r1, [pc, #252]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003992:	4b3b      	ldr	r3, [pc, #236]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	4938      	ldr	r1, [pc, #224]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039b0:	4b33      	ldr	r3, [pc, #204]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	4930      	ldr	r1, [pc, #192]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f023 0210 	bic.w	r2, r3, #16
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4929      	ldr	r1, [pc, #164]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039ec:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	4921      	ldr	r1, [pc, #132]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f023 0220 	bic.w	r2, r3, #32
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	491a      	ldr	r1, [pc, #104]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4912      	ldr	r1, [pc, #72]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	490b      	ldr	r1, [pc, #44]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3748      	adds	r7, #72	; 0x48
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e09d      	b.n	8003bd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d108      	bne.n	8003ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa6:	d009      	beq.n	8003abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
 8003aae:	e005      	b.n	8003abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fec0 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003afc:	d902      	bls.n	8003b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e002      	b.n	8003b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b12:	d007      	beq.n	8003b24 <HAL_SPI_Init+0xa0>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	ea42 0103 	orr.w	r1, r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 0204 	and.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ba0:	ea42 0103 	orr.w	r1, r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b088      	sub	sp, #32
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_SPI_Transmit+0x22>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e15f      	b.n	8003ebc <HAL_SPI_Transmit+0x2e2>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c04:	f7fd f8fa 	bl	8000dfc <HAL_GetTick>
 8003c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d002      	beq.n	8003c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c1e:	e148      	b.n	8003eb2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x52>
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e13f      	b.n	8003eb2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d10f      	bne.n	8003c9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d007      	beq.n	8003cbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cc4:	d94f      	bls.n	8003d66 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_SPI_Transmit+0xfa>
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d142      	bne.n	8003d5a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cf8:	e02f      	b.n	8003d5a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d112      	bne.n	8003d2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	1c9a      	adds	r2, r3, #2
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d2c:	e015      	b.n	8003d5a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d2e:	f7fd f865 	bl	8000dfc <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d803      	bhi.n	8003d46 <HAL_SPI_Transmit+0x16c>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d102      	bne.n	8003d4c <HAL_SPI_Transmit+0x172>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d58:	e0ab      	b.n	8003eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ca      	bne.n	8003cfa <HAL_SPI_Transmit+0x120>
 8003d64:	e080      	b.n	8003e68 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_SPI_Transmit+0x19a>
 8003d6e:	8afb      	ldrh	r3, [r7, #22]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d174      	bne.n	8003e5e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d912      	bls.n	8003da4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b02      	subs	r3, #2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da2:	e05c      	b.n	8003e5e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dca:	e048      	b.n	8003e5e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d12b      	bne.n	8003e32 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d912      	bls.n	8003e0a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	1c9a      	adds	r2, r3, #2
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b02      	subs	r3, #2
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e08:	e029      	b.n	8003e5e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	7812      	ldrb	r2, [r2, #0]
 8003e16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e30:	e015      	b.n	8003e5e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e32:	f7fc ffe3 	bl	8000dfc <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d803      	bhi.n	8003e4a <HAL_SPI_Transmit+0x270>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d102      	bne.n	8003e50 <HAL_SPI_Transmit+0x276>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e5c:	e029      	b.n	8003eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1b1      	bne.n	8003dcc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa5b 	bl	8004328 <SPI_EndRxTxTransaction>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	613b      	str	r3, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e003      	b.n	8003eb2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003eba:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10e      	bne.n	8003f04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
    return;
 8003f02:	e0ce      	b.n	80040a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_SPI_IRQHandler+0x5e>
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
    return;
 8003f20:	e0bf      	b.n	80040a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10a      	bne.n	8003f42 <HAL_SPI_IRQHandler+0x7e>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80b0 	beq.w	80040a2 <HAL_SPI_IRQHandler+0x1de>
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80aa 	beq.w	80040a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d023      	beq.n	8003fa0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d011      	beq.n	8003f88 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f68:	f043 0204 	orr.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	e00b      	b.n	8003fa0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
        return;
 8003f9e:	e080      	b.n	80040a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fae:	f043 0201 	orr.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	f043 0208 	orr.w	r2, r3, #8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04f      	beq.n	80040a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800400e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <HAL_SPI_IRQHandler+0x168>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d034      	beq.n	8004096 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0203 	bic.w	r2, r2, #3
 800403a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_SPI_IRQHandler+0x1e4>)
 800404a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fd3f 	bl	8001ad4 <HAL_DMA_Abort_IT>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	2b00      	cmp	r3, #0
 800406e:	d016      	beq.n	800409e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <HAL_SPI_IRQHandler+0x1e4>)
 8004076:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407c:	4618      	mov	r0, r3
 800407e:	f7fd fd29 	bl	8001ad4 <HAL_DMA_Abort_IT>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004094:	e003      	b.n	800409e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f808 	bl	80040ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800409c:	e000      	b.n	80040a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800409e:	bf00      	nop
    return;
 80040a0:	bf00      	nop
  }
}
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	080040c1 	.word	0x080040c1

080040ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ffe5 	bl	80040ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040e2:	bf00      	nop
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040fc:	f7fc fe7e 	bl	8000dfc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	4413      	add	r3, r2
 800410a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800410c:	f7fc fe76 	bl	8000dfc <HAL_GetTick>
 8004110:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004112:	4b39      	ldr	r3, [pc, #228]	; (80041f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	015b      	lsls	r3, r3, #5
 8004118:	0d1b      	lsrs	r3, r3, #20
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004122:	e054      	b.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d050      	beq.n	80041ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800412c:	f7fc fe66 	bl	8000dfc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	429a      	cmp	r2, r3
 800413a:	d902      	bls.n	8004142 <SPI_WaitFlagStateUntilTimeout+0x56>
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d13d      	bne.n	80041be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004150:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415a:	d111      	bne.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x94>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004164:	d004      	beq.n	8004170 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800416e:	d107      	bne.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800417e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004188:	d10f      	bne.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e017      	b.n	80041ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	429a      	cmp	r2, r3
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	461a      	mov	r2, r3
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d19b      	bne.n	8004124 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3720      	adds	r7, #32
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000

080041fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	; 0x28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800420e:	f7fc fdf5 	bl	8000dfc <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	4413      	add	r3, r2
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800421e:	f7fc fded 	bl	8000dfc <HAL_GetTick>
 8004222:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800422c:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00da      	lsls	r2, r3, #3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	0d1b      	lsrs	r3, r3, #20
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004244:	e060      	b.n	8004308 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800424c:	d107      	bne.n	800425e <SPI_WaitFifoStateUntilTimeout+0x62>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800425c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d050      	beq.n	8004308 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004266:	f7fc fdc9 	bl	8000dfc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	429a      	cmp	r2, r3
 8004274:	d902      	bls.n	800427c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d13d      	bne.n	80042f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800428a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004294:	d111      	bne.n	80042ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429e:	d004      	beq.n	80042aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d107      	bne.n	80042ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	d10f      	bne.n	80042e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e010      	b.n	800431a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3b01      	subs	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d196      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000000 	.word	0x20000000

08004328 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2200      	movs	r2, #0
 800433c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff ff5b 	bl	80041fc <SPI_WaitFifoStateUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004350:	f043 0220 	orr.w	r2, r3, #32
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e027      	b.n	80043ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fec0 	bl	80040ec <SPI_WaitFlagStateUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e014      	b.n	80043ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff34 	bl	80041fc <SPI_WaitFifoStateUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f043 0220 	orr.w	r2, r3, #32
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e000      	b.n	80043ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e041      	b.n	800444a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc fb78 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4610      	mov	r0, r2
 80043f4:	f000 f956 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b01      	cmp	r3, #1
 8004466:	d001      	beq.n	800446c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e041      	b.n	80044f0 <HAL_TIM_Base_Start+0x9c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d01d      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_TIM_Base_Start+0xa8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d018      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_TIM_Base_Start+0xac>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d013      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_TIM_Base_Start+0xb0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00e      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_TIM_Base_Start+0xb4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d009      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <HAL_TIM_Base_Start+0xb8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d004      	beq.n	80044ba <HAL_TIM_Base_Start+0x66>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <HAL_TIM_Base_Start+0xbc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <HAL_TIM_Base_Start+0x8a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b06      	cmp	r3, #6
 80044ca:	d010      	beq.n	80044ee <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044dc:	e007      	b.n	80044ee <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40001800 	.word	0x40001800
 800450c:	40014000 	.word	0x40014000
 8004510:	40015c00 	.word	0x40015c00

08004514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIM_ConfigClockSource+0x1c>
 800452c:	2302      	movs	r3, #2
 800452e:	e0b4      	b.n	800469a <HAL_TIM_ConfigClockSource+0x186>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800454e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004568:	d03e      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0xd4>
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456e:	f200 8087 	bhi.w	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	f000 8086 	beq.w	8004686 <HAL_TIM_ConfigClockSource+0x172>
 800457a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457e:	d87f      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004580:	2b70      	cmp	r3, #112	; 0x70
 8004582:	d01a      	beq.n	80045ba <HAL_TIM_ConfigClockSource+0xa6>
 8004584:	2b70      	cmp	r3, #112	; 0x70
 8004586:	d87b      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004588:	2b60      	cmp	r3, #96	; 0x60
 800458a:	d050      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x11a>
 800458c:	2b60      	cmp	r3, #96	; 0x60
 800458e:	d877      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b50      	cmp	r3, #80	; 0x50
 8004592:	d03c      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xfa>
 8004594:	2b50      	cmp	r3, #80	; 0x50
 8004596:	d873      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d058      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x13a>
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d86f      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b30      	cmp	r3, #48	; 0x30
 80045a2:	d064      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045a4:	2b30      	cmp	r3, #48	; 0x30
 80045a6:	d86b      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d060      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d867      	bhi.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05c      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d05a      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	e062      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ca:	f000 f97f 	bl	80048cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	609a      	str	r2, [r3, #8]
      break;
 80045e6:	e04f      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	f000 f968 	bl	80048cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800460a:	609a      	str	r2, [r3, #8]
      break;
 800460c:	e03c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461a:	461a      	mov	r2, r3
 800461c:	f000 f8dc 	bl	80047d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2150      	movs	r1, #80	; 0x50
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f935 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800462c:	e02c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463a:	461a      	mov	r2, r3
 800463c:	f000 f8fb 	bl	8004836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2160      	movs	r1, #96	; 0x60
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f925 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800464c:	e01c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465a:	461a      	mov	r2, r3
 800465c:	f000 f8bc 	bl	80047d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f915 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800466c:	e00c      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f000 f90c 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800467e:	e003      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      break;
 8004684:	e000      	b.n	8004688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d00f      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <TIM_Base_SetConfig+0x10c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00b      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3b      	ldr	r2, [pc, #236]	; (80047b4 <TIM_Base_SetConfig+0x110>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d007      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_Base_SetConfig+0x38>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a39      	ldr	r2, [pc, #228]	; (80047bc <TIM_Base_SetConfig+0x118>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d108      	bne.n	80046ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f4:	d027      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2d      	ldr	r2, [pc, #180]	; (80047b0 <TIM_Base_SetConfig+0x10c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d023      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <TIM_Base_SetConfig+0x110>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01f      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01b      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <TIM_Base_SetConfig+0x11c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d017      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <TIM_Base_SetConfig+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d013      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a28      	ldr	r2, [pc, #160]	; (80047cc <TIM_Base_SetConfig+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a26      	ldr	r2, [pc, #152]	; (80047d4 <TIM_Base_SetConfig+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_Base_SetConfig+0xa2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <TIM_Base_SetConfig+0x118>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d108      	bne.n	8004758 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <TIM_Base_SetConfig+0x128>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <TIM_Base_SetConfig+0xf0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_Base_SetConfig+0xf0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <TIM_Base_SetConfig+0x130>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d103      	bne.n	800479c <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	615a      	str	r2, [r3, #20]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40015c00 	.word	0x40015c00
 80047c0:	40001800 	.word	0x40001800
 80047c4:	40001c00 	.word	0x40001c00
 80047c8:	40002000 	.word	0x40002000
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800

080047d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f023 030a 	bic.w	r3, r3, #10
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004836:	b480      	push	{r7}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f023 0210 	bic.w	r2, r3, #16
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	031b      	lsls	r3, r3, #12
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004872:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f043 0307 	orr.w	r3, r3, #7
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e055      	b.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d01d      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d018      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00e      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10c      	bne.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	40001800 	.word	0x40001800
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40015c00 	.word	0x40015c00

080049f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e040      	b.n	8004a88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc f8aa 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	; 0x24
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fb28 	bl	8005088 <UART_SetConfig>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e022      	b.n	8004a88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc96 	bl	800537c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fd1d 	bl	80054c0 <UART_CheckIdleState>
 8004a86:	4603      	mov	r3, r0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0ba      	sub	sp, #232	; 0xe8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004aba:	f640 030f 	movw	r3, #2063	; 0x80f
 8004abe:	4013      	ands	r3, r2
 8004ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d115      	bne.n	8004af8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00f      	beq.n	8004af8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 82ab 	beq.w	8005044 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
      }
      return;
 8004af6:	e2a5      	b.n	8005044 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8117 	beq.w	8004d30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004b0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004b12:	4b85      	ldr	r3, [pc, #532]	; (8004d28 <HAL_UART_IRQHandler+0x298>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 810a 	beq.w	8004d30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d011      	beq.n	8004b4c <HAL_UART_IRQHandler+0xbc>
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00b      	beq.n	8004b4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	f043 0201 	orr.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <HAL_UART_IRQHandler+0xec>
 8004b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b72:	f043 0204 	orr.w	r2, r3, #4
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d011      	beq.n	8004bac <HAL_UART_IRQHandler+0x11c>
 8004b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	f043 0202 	orr.w	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d017      	beq.n	8004be8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bbc:	f003 0320 	and.w	r3, r3, #32
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00b      	beq.n	8004be8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2208      	movs	r2, #8
 8004bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bde:	f043 0208 	orr.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d012      	beq.n	8004c1a <HAL_UART_IRQHandler+0x18a>
 8004bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8211 	beq.w	8005048 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d005      	beq.n	8004c72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04f      	beq.n	8004d12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fd33 	bl	80056de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d141      	bne.n	8004d0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1d9      	bne.n	8004c86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d013      	beq.n	8004d02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	4a13      	ldr	r2, [pc, #76]	; (8004d2c <HAL_UART_IRQHandler+0x29c>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fef4 	bl	8001ad4 <HAL_DMA_Abort_IT>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d017      	beq.n	8004d22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e00f      	b.n	8004d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9aa 	bl	800505c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e00b      	b.n	8004d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f9a6 	bl	800505c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e007      	b.n	8004d22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9a2 	bl	800505c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004d20:	e192      	b.n	8005048 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d22:	bf00      	nop
    return;
 8004d24:	e190      	b.n	8005048 <HAL_UART_IRQHandler+0x5b8>
 8004d26:	bf00      	nop
 8004d28:	04000120 	.word	0x04000120
 8004d2c:	080057a7 	.word	0x080057a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f040 814b 	bne.w	8004fd0 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f003 0310 	and.w	r3, r3, #16
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 8144 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 813d 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2210      	movs	r2, #16
 8004d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	f040 80b5 	bne.w	8004ed8 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8164 	beq.w	800504c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	f080 815c 	bcs.w	800504c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004dd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004dd8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004de0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1da      	bne.n	8004daa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3308      	adds	r3, #8
 8004e14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e24:	e841 2300 	strex	r3, r2, [r1]
 8004e28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1e1      	bne.n	8004df4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e3      	bne.n	8004e30 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e9a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e4      	bne.n	8004e76 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc fdd6 	bl	8001a62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8cd 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ed6:	e0b9      	b.n	800504c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80ab 	beq.w	8005050 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8004efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a6 	beq.w	8005050 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f26:	647b      	str	r3, [r7, #68]	; 0x44
 8004f28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e4      	bne.n	8004f04 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	623b      	str	r3, [r7, #32]
   return(result);
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e3      	bne.n	8004f3a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0310 	bic.w	r3, r3, #16
 8004f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fac:	69b9      	ldr	r1, [r7, #24]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	e841 2300 	strex	r3, r2, [r1]
 8004fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e4      	bne.n	8004f86 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f851 	bl	8005070 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fce:	e03f      	b.n	8005050 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <HAL_UART_IRQHandler+0x56a>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d008      	beq.n	8004ffa <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fc17 	bl	8005826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ff8:	e02d      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01c      	beq.n	8005054 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	4798      	blx	r3
    }
    return;
 8005022:	e017      	b.n	8005054 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d012      	beq.n	8005056 <HAL_UART_IRQHandler+0x5c6>
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fbc8 	bl	80057d2 <UART_EndTransmit_IT>
    return;
 8005042:	e008      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005044:	bf00      	nop
 8005046:	e006      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005048:	bf00      	nop
 800504a:	e004      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
      return;
 800504c:	bf00      	nop
 800504e:	e002      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005054:	bf00      	nop
  }

}
 8005056:	37e8      	adds	r7, #232	; 0xe8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80050b6:	f023 030c 	bic.w	r3, r3, #12
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6979      	ldr	r1, [r7, #20]
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a99      	ldr	r2, [pc, #612]	; (8005368 <UART_SetConfig+0x2e0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d120      	bne.n	800514a <UART_SetConfig+0xc2>
 8005108:	4b98      	ldr	r3, [pc, #608]	; (800536c <UART_SetConfig+0x2e4>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d817      	bhi.n	8005144 <UART_SetConfig+0xbc>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x94>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	08005139 	.word	0x08005139
 8005124:	0800513f 	.word	0x0800513f
 8005128:	08005133 	.word	0x08005133
 800512c:	2301      	movs	r3, #1
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e061      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005132:	2302      	movs	r3, #2
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e05e      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005138:	2304      	movs	r3, #4
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e05b      	b.n	80051f6 <UART_SetConfig+0x16e>
 800513e:	2308      	movs	r3, #8
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e058      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005144:	2310      	movs	r3, #16
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e055      	b.n	80051f6 <UART_SetConfig+0x16e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a88      	ldr	r2, [pc, #544]	; (8005370 <UART_SetConfig+0x2e8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d124      	bne.n	800519e <UART_SetConfig+0x116>
 8005154:	4b85      	ldr	r3, [pc, #532]	; (800536c <UART_SetConfig+0x2e4>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800515c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005160:	d011      	beq.n	8005186 <UART_SetConfig+0xfe>
 8005162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005166:	d817      	bhi.n	8005198 <UART_SetConfig+0x110>
 8005168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516c:	d011      	beq.n	8005192 <UART_SetConfig+0x10a>
 800516e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005172:	d811      	bhi.n	8005198 <UART_SetConfig+0x110>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <UART_SetConfig+0xf8>
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x104>
 800517e:	e00b      	b.n	8005198 <UART_SetConfig+0x110>
 8005180:	2300      	movs	r3, #0
 8005182:	77fb      	strb	r3, [r7, #31]
 8005184:	e037      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005186:	2302      	movs	r3, #2
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e034      	b.n	80051f6 <UART_SetConfig+0x16e>
 800518c:	2304      	movs	r3, #4
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e031      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005192:	2308      	movs	r3, #8
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e02e      	b.n	80051f6 <UART_SetConfig+0x16e>
 8005198:	2310      	movs	r3, #16
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e02b      	b.n	80051f6 <UART_SetConfig+0x16e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a74      	ldr	r2, [pc, #464]	; (8005374 <UART_SetConfig+0x2ec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d124      	bne.n	80051f2 <UART_SetConfig+0x16a>
 80051a8:	4b70      	ldr	r3, [pc, #448]	; (800536c <UART_SetConfig+0x2e4>)
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80051b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051b4:	d011      	beq.n	80051da <UART_SetConfig+0x152>
 80051b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051ba:	d817      	bhi.n	80051ec <UART_SetConfig+0x164>
 80051bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c0:	d011      	beq.n	80051e6 <UART_SetConfig+0x15e>
 80051c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051c6:	d811      	bhi.n	80051ec <UART_SetConfig+0x164>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <UART_SetConfig+0x14c>
 80051cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051d0:	d006      	beq.n	80051e0 <UART_SetConfig+0x158>
 80051d2:	e00b      	b.n	80051ec <UART_SetConfig+0x164>
 80051d4:	2300      	movs	r3, #0
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e00d      	b.n	80051f6 <UART_SetConfig+0x16e>
 80051da:	2302      	movs	r3, #2
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e00a      	b.n	80051f6 <UART_SetConfig+0x16e>
 80051e0:	2304      	movs	r3, #4
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e007      	b.n	80051f6 <UART_SetConfig+0x16e>
 80051e6:	2308      	movs	r3, #8
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e004      	b.n	80051f6 <UART_SetConfig+0x16e>
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e001      	b.n	80051f6 <UART_SetConfig+0x16e>
 80051f2:	2310      	movs	r3, #16
 80051f4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051fe:	d15a      	bne.n	80052b6 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 8005200:	7ffb      	ldrb	r3, [r7, #31]
 8005202:	2b08      	cmp	r3, #8
 8005204:	d827      	bhi.n	8005256 <UART_SetConfig+0x1ce>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x184>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005231 	.word	0x08005231
 8005210:	08005239 	.word	0x08005239
 8005214:	08005241 	.word	0x08005241
 8005218:	08005257 	.word	0x08005257
 800521c:	08005247 	.word	0x08005247
 8005220:	08005257 	.word	0x08005257
 8005224:	08005257 	.word	0x08005257
 8005228:	08005257 	.word	0x08005257
 800522c:	0800524f 	.word	0x0800524f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005230:	f7fe fa70 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8005234:	61b8      	str	r0, [r7, #24]
        break;
 8005236:	e013      	b.n	8005260 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005238:	f7fe fa8e 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 800523c:	61b8      	str	r0, [r7, #24]
        break;
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005240:	4b4d      	ldr	r3, [pc, #308]	; (8005378 <UART_SetConfig+0x2f0>)
 8005242:	61bb      	str	r3, [r7, #24]
        break;
 8005244:	e00c      	b.n	8005260 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7fe f9ed 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 800524a:	61b8      	str	r0, [r7, #24]
        break;
 800524c:	e008      	b.n	8005260 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005252:	61bb      	str	r3, [r7, #24]
        break;
 8005254:	e004      	b.n	8005260 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	77bb      	strb	r3, [r7, #30]
        break;
 800525e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d074      	beq.n	8005350 <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	005a      	lsls	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	d916      	bls.n	80052b0 <UART_SetConfig+0x228>
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005288:	d212      	bcs.n	80052b0 <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	b29b      	uxth	r3, r3
 800528e:	f023 030f 	bic.w	r3, r3, #15
 8005292:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	b29b      	uxth	r3, r3
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	b29a      	uxth	r2, r3
 80052a0:	89fb      	ldrh	r3, [r7, #14]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	89fa      	ldrh	r2, [r7, #14]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	e04f      	b.n	8005350 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77bb      	strb	r3, [r7, #30]
 80052b4:	e04c      	b.n	8005350 <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d828      	bhi.n	800530e <UART_SetConfig+0x286>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <UART_SetConfig+0x23c>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	0800530f 	.word	0x0800530f
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
 80052dc:	0800530f 	.word	0x0800530f
 80052e0:	0800530f 	.word	0x0800530f
 80052e4:	08005307 	.word	0x08005307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e8:	f7fe fa14 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 80052ec:	61b8      	str	r0, [r7, #24]
        break;
 80052ee:	e013      	b.n	8005318 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052f0:	f7fe fa32 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 80052f4:	61b8      	str	r0, [r7, #24]
        break;
 80052f6:	e00f      	b.n	8005318 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <UART_SetConfig+0x2f0>)
 80052fa:	61bb      	str	r3, [r7, #24]
        break;
 80052fc:	e00c      	b.n	8005318 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe f991 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005302:	61b8      	str	r0, [r7, #24]
        break;
 8005304:	e008      	b.n	8005318 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	61bb      	str	r3, [r7, #24]
        break;
 800530c:	e004      	b.n	8005318 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	77bb      	strb	r3, [r7, #30]
        break;
 8005316:	bf00      	nop
    }

    if (pclk != 0U)
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d018      	beq.n	8005350 <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085a      	lsrs	r2, r3, #1
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b0f      	cmp	r3, #15
 8005336:	d909      	bls.n	800534c <UART_SetConfig+0x2c4>
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533e:	d205      	bcs.n	800534c <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	e001      	b.n	8005350 <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800535c:	7fbb      	ldrb	r3, [r7, #30]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40013800 	.word	0x40013800
 800536c:	40021000 	.word	0x40021000
 8005370:	40004400 	.word	0x40004400
 8005374:	40004800 	.word	0x40004800
 8005378:	007a1200 	.word	0x007a1200

0800537c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01a      	beq.n	8005492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547a:	d10a      	bne.n	8005492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b098      	sub	sp, #96	; 0x60
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d0:	f7fb fc94 	bl	8000dfc <HAL_GetTick>
 80054d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d12e      	bne.n	8005542 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ec:	2200      	movs	r2, #0
 80054ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f88c 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d021      	beq.n	8005542 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005512:	653b      	str	r3, [r7, #80]	; 0x50
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800552a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e062      	b.n	8005608 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b04      	cmp	r3, #4
 800554e:	d149      	bne.n	80055e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005558:	2200      	movs	r2, #0
 800555a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f856 	bl	8005610 <UART_WaitOnFlagUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d03c      	beq.n	80055e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	623b      	str	r3, [r7, #32]
   return(result);
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800557e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
 800558a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800558e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3308      	adds	r3, #8
 80055ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055bc:	61fa      	str	r2, [r7, #28]
 80055be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	69b9      	ldr	r1, [r7, #24]
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e5      	bne.n	800559c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e011      	b.n	8005608 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3758      	adds	r7, #88	; 0x58
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005620:	e049      	b.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d045      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fb fbe7 	bl	8000dfc <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <UART_WaitOnFlagUntilTimeout+0x30>
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e048      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d031      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d110      	bne.n	8005682 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2208      	movs	r2, #8
 8005666:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f838 	bl	80056de <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2208      	movs	r2, #8
 8005672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e029      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800568c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005690:	d111      	bne.n	80056b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f81e 	bl	80056de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e00f      	b.n	80056d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	4013      	ands	r3, r2
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	bf0c      	ite	eq
 80056c6:	2301      	moveq	r3, #1
 80056c8:	2300      	movne	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d0a6      	beq.n	8005622 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056de:	b480      	push	{r7}
 80056e0:	b095      	sub	sp, #84	; 0x54
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005704:	643b      	str	r3, [r7, #64]	; 0x40
 8005706:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800570a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e6      	bne.n	80056e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	61fb      	str	r3, [r7, #28]
   return(result);
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005738:	62fa      	str	r2, [r7, #44]	; 0x2c
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800573e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	2b01      	cmp	r3, #1
 8005752:	d118      	bne.n	8005786 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	60bb      	str	r3, [r7, #8]
   return(result);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	613b      	str	r3, [r7, #16]
   return(result);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e6      	bne.n	8005754 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	669a      	str	r2, [r3, #104]	; 0x68
}
 800579a:	bf00      	nop
 800579c:	3754      	adds	r7, #84	; 0x54
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f7ff fc49 	bl	800505c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b088      	sub	sp, #32
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e6      	bne.n	80057da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fb f9f5 	bl	8000c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800581e:	bf00      	nop
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005842:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005846:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	b29b      	uxth	r3, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	b29b      	uxth	r3, r3
 8005858:	4013      	ands	r3, r2
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005870:	b084      	sub	sp, #16
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	f107 0014 	add.w	r0, r7, #20
 800587e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	b004      	add	sp, #16
 80058b0:	4770      	bx	lr

080058b2 <memset>:
 80058b2:	4402      	add	r2, r0
 80058b4:	4603      	mov	r3, r0
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d100      	bne.n	80058bc <memset+0xa>
 80058ba:	4770      	bx	lr
 80058bc:	f803 1b01 	strb.w	r1, [r3], #1
 80058c0:	e7f9      	b.n	80058b6 <memset+0x4>
	...

080058c4 <__libc_init_array>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	4d0d      	ldr	r5, [pc, #52]	; (80058fc <__libc_init_array+0x38>)
 80058c8:	4c0d      	ldr	r4, [pc, #52]	; (8005900 <__libc_init_array+0x3c>)
 80058ca:	1b64      	subs	r4, r4, r5
 80058cc:	10a4      	asrs	r4, r4, #2
 80058ce:	2600      	movs	r6, #0
 80058d0:	42a6      	cmp	r6, r4
 80058d2:	d109      	bne.n	80058e8 <__libc_init_array+0x24>
 80058d4:	4d0b      	ldr	r5, [pc, #44]	; (8005904 <__libc_init_array+0x40>)
 80058d6:	4c0c      	ldr	r4, [pc, #48]	; (8005908 <__libc_init_array+0x44>)
 80058d8:	f000 f818 	bl	800590c <_init>
 80058dc:	1b64      	subs	r4, r4, r5
 80058de:	10a4      	asrs	r4, r4, #2
 80058e0:	2600      	movs	r6, #0
 80058e2:	42a6      	cmp	r6, r4
 80058e4:	d105      	bne.n	80058f2 <__libc_init_array+0x2e>
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
 80058e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ec:	4798      	blx	r3
 80058ee:	3601      	adds	r6, #1
 80058f0:	e7ee      	b.n	80058d0 <__libc_init_array+0xc>
 80058f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f6:	4798      	blx	r3
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7f2      	b.n	80058e2 <__libc_init_array+0x1e>
 80058fc:	0800595c 	.word	0x0800595c
 8005900:	0800595c 	.word	0x0800595c
 8005904:	0800595c 	.word	0x0800595c
 8005908:	08005960 	.word	0x08005960

0800590c <_init>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr

08005918 <_fini>:
 8005918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591a:	bf00      	nop
 800591c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591e:	bc08      	pop	{r3}
 8005920:	469e      	mov	lr, r3
 8005922:	4770      	bx	lr
